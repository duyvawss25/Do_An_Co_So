const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

// üü© ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
exports.registerUser = async (req, res) => {
  try {
    console.log("üì• Register request:", req.body);

    const { name, email, password, role } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    // üü¶ G√°n role (m·∫∑c ƒë·ªãnh l√† 'user', tr·ª´ khi b·∫°n mu·ªën t·∫°o admin)
    const newUser = new User({
      name,
      email,
      password,
      role: role && role === "admin" ? "admin" : "user"
    });

    await newUser.save();
    console.log("‚úÖ User created:", newUser.email);

    const token = jwt.sign(
      { id: newUser._id },
      process.env.JWT_SECRET || "fallback-secret",
      { expiresIn: "7d" }
    );

    return res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng!",
      token,
      user: {
        id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
      },
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω:", error);
    return res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω" });
  }
};

// üü© ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
exports.loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(401).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign(
      { id: user._id },
      process.env.JWT_SECRET || "fallback-secret",
      { expiresIn: "7d" }
    );

    return res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:", error);
    return res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
  }
};
exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch users:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// üü© X√≥a ng∆∞·ªùi d√πng theo ID (ch·ªâ admin)
exports.deleteUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    await user.remove();
    res.json({ message: "X√≥a user th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a user:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};